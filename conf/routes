# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /is-online                  controllers.Application.healthcheck
GET     /                           @controllers.Application.rootIndex()

GET     /test/api419                @controllers.Application.test419
GET     /oauthCallback              @controllers.Auth.oauthCallback
POST    /api/logout                 @controllers.Auth.logout
GET     /api/loginStatus            @controllers.UserController.loginStatus
GET     /loginAuthStub              @controllers.Application.authstub

POST    /api/scanTarget                 @controllers.ScanTargetController.newTarget
DELETE  /api/scanTarget/:id             @controllers.ScanTargetController.removeTarget(id)
GET     /api/scanTarget/:id             @controllers.ScanTargetController.get(id)

GET     /api/scanTarget                 @controllers.ScanTargetController.listScanTargets
POST    /api/scanTarget/:id/scan        @controllers.ScanTargetController.manualTrigger(id)
POST    /api/scanTarget/:id/deletionScan  @controllers.ScanTargetController.manualTriggerDeletionScan(id)
POST    /api/scanTarget/:id/additionScan  @controllers.ScanTargetController.manualTriggerAdditionScan(id)
POST    /api/scanTarget/:id/legacyProxiesScan @controllers.ScanTargetController.scanForLegacyProxies(id)
POST    /api/scanTarget/:id/genProxies  @controllers.ScanTargetController.genProxies(id)
POST    /api/scanTarget/:id/checkTranscoder @controllers.ScanTargetController.initiateCheckJob(id)
POST    /api/scanTarget/:id/createPipelines @controllers.ScanTargetController.createPipelines(id, force:Boolean ?=false)

GET     /api/search/basic      @controllers.SearchController.simpleStringSearch(q:Option[String],start:Option[Int],length:Option[Int])
GET     /api/entry/:id                  @controllers.SearchController.getEntry(id)
PUT     /api/search/suggestions         @controllers.SearchController.suggestions
POST    /api/search/browser             @controllers.SearchController.browserSearch(start:Int ?= 0, size:Int ?=100)
GET     /api/search/myLightBox          @controllers.SearchController.lightboxSearch(start:Int ?= 0, size:Int ?=100, bulkId:Option[String])

GET     /api/proxy/searchForFile        @controllers.ProxiesController.searchFor(id:String)
GET     /api/proxy/:id/associate        @controllers.ProxiesController.associate(fileId:Option[String],id)
GET     /api/proxy/:id/playable         @controllers.ProxiesController.getPlayable(id, proxyType:Option[String])
GET     /api/proxy/:id                  @controllers.ProxiesController.proxyForId(id, proxyType:Option[String])
POST    /api/proxy/relink/global        @controllers.ProxiesController.relinkAllProxies

POST    /api/proxy/generate/:id/thumbnail   @controllers.ProxiesController.generateThumbnail(id)
POST    /api/proxy/generate/:id/:typeStr     @controllers.ProxiesController.generateProxy(id, typeStr)
POST    /api/proxy/analyse/:id          @controllers.ProxiesController.analyseMetadata(id)

GET     /api/job/all                    @controllers.JobController.getAllJobs(limit:Int ?=100, scanFrom:Option[String])
GET     /api/job/:jobId                 @controllers.JobController.getJob(jobId)
GET     /api/job/forFile/:fileId        @controllers.JobController.jobsFor(fileId)
PUT     /api/job/search                 @controllers.JobController.jobSearch(linit:Int ?=100)
PUT     /api/job/transcode/:jobId/refresh  @controllers.JobController.refreshTranscodeInfo(jobId)

GET     /api/browse/collections         @controllers.BrowseCollectionController.getCollections
GET     /api/browse/:collection         @controllers.BrowseCollectionController.getFolders(collection, prefix:Option[String])
PUT     /api/browse/:collection/summary @controllers.BrowseCollectionController.pathSummary(collection,prefix:Option[String])

GET     /api/user                       @controllers.UserController.allUsers
PUT     /api/user/update                @controllers.UserController.updateUserProfileField
GET     /api/user/myProfile             @controllers.UserController.myProfile

PUT     /api/lightbox/my/addFromSearch  @controllers.LightboxController.addFromSearch
GET     /api/lightbox/my/details        @controllers.LightboxController.lightboxDetails
PUT     /api/lightbox/my/:fileId        @controllers.LightboxController.addToLightbox(fileId)
DELETE  /api/lightbox/my/:fileId        @controllers.LightboxController.removeFromLightbox(fileId)
GET     /api/lightbox/my/bulks          @controllers.LightboxController.myBulks
DELETE  /api/lightbox/bulk/:bulkId      @controllers.LightboxController.deleteBulk(bulkId)

GET     /api/download/:fileId           @controllers.LightboxController.getDownloadLink(fileId)

GET     /api/archive/status/:fileId     @controllers.LightboxController.checkRestoreStatus(fileId)

GET     /api/version                    @controllers.VersionController.getInfo

GET     /api/proxyFramework/deployments             @controllers.ProxyFrameworkAdminController.existingDeployments
GET     /api/proxyFramework/deploymentScan          @controllers.ProxyFrameworkAdminController.lookupPotentialDeployments
POST    /api/proxyFramework/deployments             @controllers.ProxyFrameworkAdminController.addDeployment
POST    /api/proxyFramework/deploymentDirect        @controllers.ProxyFrameworkAdminController.addDeploymentDirect
DELETE  /api/proxyFramework/deployments/:forRegion  @controllers.ProxyFrameworkAdminController.removeDeployment(forRegion)
GET     /api/regions                    @controllers.ProxyFrameworkAdminController.getRegions

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
GET     /*tail                      @controllers.Application.index(tail)

