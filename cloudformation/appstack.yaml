AWSTemplateFormatVersion: '2010-09-09'
Description: Indexing, search, proxying and retrieval for glacier-backed S3
Parameters:
  App:
    Type: String
    Description: Application identifier for RiffRaff
    Default: archivehunter
  Stack:
    Type: String
    Description: Stack identifier for RiffRaff
    Default: multimedia
  Stage:
    Type: String
    AllowedValues:
    - CODE
    - DEV
    - PROD
    Description: Deployment stage
  AmiId:
    Type: String
    Description: ID of the base image to build instances from.  Build this with Amigo.
  DeploymentDomain:
    Type: String
    Description: DNS domain that this is going to be deployed into.  This is needed for pan-domain authentication to work (see readme).  Assumption is that the access URL is at https://${App}.${DeploymentDomain}
  PandaBucket:
    Type: String
    Description: S3 bucket that contains the Pan-domain auth settings
  OfficeIpRange:
    Type: String
    Description: CIDR block of ip addresses to be allowed SSH access
  InstanceType:
    Type: String
    Description: What type of instance to launch
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    Default: t2.nano
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Root access keypair
  VPCID:
    Description: Virtual Private Cloud to deploy into
    Type: AWS::EC2::VPC::Id
  DeploySubnets:
    Description: Subnets to deploy into.
    Type: List<AWS::EC2::Subnet::Id>
  ESVolumeSize:
    Description: Size of storage volume to provision, for each node in the elasticsearch cluster
    Type: Number
  ESVolumeType:
    Description: Type of storage to provision for elasticsearch.  Choose sc1 for cheap dev, or gp2 for prod
    Type: String
    AllowedValues:
      - standard
      - gp2
      - io1
    Default: gp2
  ESSubnet:
    Description: Subnet within which to deploy elasticsearch. Currently only one is supported.
    Type: AWS::EC2::Subnet::Id
  ESInstanceCount:
    Description: Number of instances to provision for elasticsearch
    Type: Number
  ESInstanceType:
    Description: Type of instance to deploy for elasticsearch
    Type: String
    AllowedValues:
      - t2.small.elasticsearch
      - t2.medium.elasticsearch
      - r4.large.elasticsearch
      - r4.xlarge.elasticsearch
    Default: t2.small.elasticsearch
  LoadBalancerCert:
    Description: ARN of an SSL certificate to allow https access to loadbalancer
    Type: String
  AppSecretString:
    Description: Long random string used as an app secret to secure cookies etc.
    Type: String
    NoEcho: True
  ProxyingTaskImageRef:
    Description: Docker path to the image used for proxying.
    Type: String
    Default: guardianmultimedia/archivehunter-proxying:90
  VideoTranscodingPresetId:
    Description: ETS Preset ID to use when transcoding video proxies
    Type: String
    Default: 1387374611767-d52fja
  AudioTranscodingPresetId:
    Description: ETS Preset ID to use when transcoding video proxies
    Type: String
    Default: 1351620000001-300040
Resources:
  AccessorSG: #this group is exported and used by bucketmonitor yaml. defined here so that it can be marked for access to ES
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for lambdas to access ArchiveHunter search index
      VpcId: !Ref VPCID
  ESSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for access to the ArchiveHunter search index
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt AccessorSG.GroupId
          FromPort: 443
          ToPort: 443
      VpcId: !Ref VPCID

  SearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      EBSOptions:
        EBSEnabled: true
        VolumeSize: !Ref ESVolumeSize
        VolumeType: !Ref ESVolumeType
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: !Ref ESInstanceCount
        InstanceType: !Ref ESInstanceType
        ZoneAwarenessEnabled: false #FIXME: defaulting to this for dev, update with appropriate safeguards for prod
      ElasticsearchVersion: 6.3
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Stack
          Value: !Ref Stack
        - Key: Stage
          Value: !Ref Stage
      VPCOptions:
        SecurityGroupIds:
          - !GetAtt ESSecurityGroup.GroupId
        SubnetIds:
          - !Ref ESSubnet

  ScanTargetsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: bucketName
          AttributeType: S
      KeySchema:
        - AttributeName: bucketName
          KeyType: HASH
      ProvisionedThroughput:
        WriteCapacityUnits: 1
        ReadCapacityUnits: 1
      Tags:
        - Key: App
          Value: !Sub ${App}-webapp
        - Key: Stack
          Value: !Ref Stack
        - Key: Stage
          Value: !Ref Stage

  JobHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: jobId
        AttributeType: S
      - AttributeName: sourceId
        AttributeType: S
      - AttributeName: sourceType
        AttributeType: S
      - AttributeName: jobStatus
        AttributeType: S
      - AttributeName: startedAt
        AttributeType: S
      KeySchema:
      - AttributeName: jobId
        KeyType: HASH
      ProvisionedThroughput:
        WriteCapacityUnits: 2
        ReadCapacityUnits: 10
      GlobalSecondaryIndexes:
        - IndexName: sourcesIndex
          KeySchema:
            - AttributeName: sourceId
              KeyType: HASH
            - AttributeName: sourceType
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            WriteCapacityUnits: 2
            ReadCapacityUnits: 10
        - IndexName: jobStatusIndex
          KeySchema:
            - AttributeName: jobStatus
              KeyType: HASH
            - AttributeName: startedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            WriteCapacityUnits: 2
            ReadCapacityUnits: 10
      Tags:
      - Key: App
        Value: !Sub ${App}-webapp
      - Key: Stack
        Value: !Ref Stack
      - Key: Stage
        Value: !Ref Stage
  ProxyLocationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: fileId
          AttributeType: S
        - AttributeName: proxyId
          AttributeType: S
        - AttributeName: proxyType
          AttributeType: S
      KeySchema:
        - AttributeName: fileId
          KeyType: HASH
        - AttributeName: proxyType
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: proxyIdIndex
          KeySchema:
          - AttributeName: proxyId
            KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            WriteCapacityUnits: 1
            ReadCapacityUnits: 1
      ProvisionedThroughput:
        WriteCapacityUnits: 10
        ReadCapacityUnits: 10
      Tags:
        - Key: App
          Value: !Sub ${App}-webapp
        - Key: Stack
          Value: !Ref Stack
        - Key: Stage
          Value: !Ref Stage

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load-balancer security group for launchdetector
      SecurityGroupIngress:
      - CidrIp: !Ref OfficeIpRange
        FromPort: 9000
        ToPort: 9000
        IpProtocol: tcp
      - CidrIp: !Ref OfficeIpRange
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
      - SourceSecurityGroupId: !GetAtt AutodowningLambdaSG.GroupId
        FromPort: 8558
        ToPort: 8558
        IpProtocol: tcp
      VpcId: !Ref VPCID

  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      HealthCheck:
        HealthyThreshold: "3"
        Interval: "10"
        Target: "HTTP:9000/is-online"
        Timeout: "3"
        UnhealthyThreshold: "2"
      Listeners:
      - InstancePort: "9000"
        InstanceProtocol: "http"
        LoadBalancerPort: "443"
        Protocol: "https"
        SSLCertificateId: !Ref LoadBalancerCert
      - InstancePort: "2552"
        InstanceProtocol: "tcp"
        LoadBalancerPort: "2552"
        Protocol: "tcp"
      - InstancePort: "8558"
        InstanceProtocol: "http"
        LoadBalancerPort: "8558"
        Protocol: "http"
      Scheme: internal
      SecurityGroups:
      - !GetAtt LoadBalancerSG.GroupId
      Subnets: !Ref DeploySubnets
      Tags:
      - Key: App
        Value: !Sub ${App}-webapp
      - Key: Stack
        Value: !Ref Stack
      - Key: Stage
        Value: !Ref Stage

  ProxyGeneratorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: BucketScanAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:PutObject
            Resource:
            - arn:aws:s3:::archivehunter-*
            - arn:aws:s3:::archivehunter-*/*
            - arn:aws:s3:::gnm-multimedia-*
            - arn:aws:s3:::gnm-multimedia-*/*
            - arn:aws:s3:::mm-archive-*
            - arn:aws:s3:::mm-archive-*/*
      - PolicyName: LogsAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            - "logs:DescribeLogStreams"
            Resource:
            - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
      - PolicyName: ImageDownloadAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:GetAuthorizationToken"
              - ecr:GetAuthorizationToken
            Resource: "*"

  #see https://docs.aws.amazon.com/elastictranscoder/latest/developerguide/access-control.html
  TranscodingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: elastictranscoder.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: BucketRead
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Sid: '1'
            Effect: Allow
            Action:
            - s3:Get*
            - s3:ListBucket
            - s3:Put*
            - s3:*MultipartUpload*
            Resource: "*"
      - PolicyName: SNSPublish
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Sid: '2'
            Effect: Allow
            Action: sns:Publish
            Resource: "*"
      - PolicyName: BlockBucketOps
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Sid: '3'
            Effect: Deny
            Action:
            - sns:*Permission*
            - sns:*Delete*
            - sns:*Remove*
            - s3:*Policy*
            - s3:*Delete*
            Resource: "*"

  TranscodeUpdateTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt TranscodeUpdateMsg.Arn
          Protocol: sqs

  TranscodeUpdateMsg:
    Type: AWS::SQS::Queue

  SNSSubscriptionPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Id: MyQueuePolicy
        Statement:
        - Sid: Allow-SendMessage-From-SNS-Topic
          Effect: Allow
          Principal: "*"
          Action:
          - sqs:SendMessage
          Resource: !GetAtt TranscodeUpdateMsg.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref TranscodeUpdateTopic
      Queues:
      - !GetAtt TranscodeUpdateMsg.QueueName

  #Autodowning lambda - receive events from autoscaling to tell us when nodes go away.
  ScalingRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Remove terminated instances from Akka cluster
      EventPattern:
        source:
        - aws.autoscaling
        detail-type:
        - "EC2 Instance-terminate Lifecycle Action"
      State: ENABLED
      Targets:
        - Arn: !GetAtt AutodowningLambda.Arn
          Id: !Sub ${Stack}-${App}Autodowning-${Stage}

  #this SG is allowed to access 8558 via the (internal) loadbalancer
  AutodowningInstancesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: instanceId
        AttributeType: S
      KeySchema:
      - AttributeName: instanceId
        KeyType: HASH
      ProvisionedThroughput:
        WriteCapacityUnits: 1
        ReadCapacityUnits: 1
      Tags:
      - Key: App
        Value: !Sub ${App}-autodowning
      - Key: Stack
        Value: !Ref Stack
      - Key: Stage
        Value: !Ref Stage

  AutodowningLambdaSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for archivehunter autodowning lambda
      VpcId: !Ref VPCID

  AutodowningInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AutodowningLambda.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScalingRule.Arn

  AutodowningLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: AccessBucket
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:DescribeInstances
            - ec2:DescribeInstanceStatus
            - ec2:DescribeTags
            Resource: "*"
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
      - PolicyName: AccessInstancesTable
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AutodowningInstancesTable}

  #main lambda function
  AutodowningLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: gnm-multimedia-rr-deployables
        S3Key: !Sub ${Stack}/${Stage}/archivehunter-autodowning-lambda/autoDowningLambda.jar
      Environment:
        Variables:
          LOADBALANCER: !GetAtt LoadBalancer.DNSName
          INSTANCES_TABLE: !Ref AutodowningInstancesTable
          #only act on instances that match these tags
          APP_TAG: !Sub ${App}-webapp
          STACK_TAG: !Ref Stack
          STAGE_TAG: !Ref Stage
      Handler: AutoDowningLambdaMain
      FunctionName: !Sub archivehunter-autodown-${Stage}
      MemorySize: 768
      Role: !GetAtt AutodowningLambdaRole.Arn
      Runtime: java8
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
        - !GetAtt AutodowningLambdaSG.GroupId
        SubnetIds: !Ref DeploySubnets
      Tags:
      - Key: App
        Value: !Ref App
      - Key: Stack
        Value: !Ref Stack
      - Key: Stage
        Value: !Ref Stage

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: DataAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            - dynamodb:UpdateTable #required for updating provisioned capacity
            - dynamodb:BatchWriteItem
            - dynamodb:DescribeTable
            - dynamodb:DeleteItem
            - dynamodb:RestoreTableFromBackup
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:CreateBackup
            - dynamodb:GetRecords
            Resource:
            - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ScanTargetsTable}
            - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProxyLocationTable}
            - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProxyLocationTable}/index/*
            - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${JobHistoryTable}
            - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${JobHistoryTable}/index/*
      - PolicyName: TranscoderAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
            - "elastictranscoder:*"
            Resource:
            - !Sub arn:aws:elastictranscoder:*:${AWS::AccountId}:pipeline/*
            - !Sub arn:aws:elastictranscoder:*:${AWS::AccountId}:job/*
            - !Sub arn:aws:elastictranscoder:*:${AWS::AccountId}:preset/${VideoTranscodingPresetId}
            - !Sub arn:aws:elastictranscoder:*:${AWS::AccountId}:preset/${AudioTranscodingPresetId}
      - PolicyName: TranscoderAccessList
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
            - elastictranscoder:ListPipelines
            Resource:
            - "*"
      - PolicyName: PandaAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListObjects
            Resource:
              - !Sub arn:aws:s3:::${PandaBucket}/*
      - PolicyName: MessageQueueRead
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
              - sqs:*
            Resource:
              - !GetAtt TranscodeUpdateMsg.Arn
      - PolicyName: ContainerAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
              - ecs:List*
              - ecs:Describe*
              - ecs:*Task
            Resource:
            - !GetAtt ProxyingCluster.Arn
            - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*
            - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/*
      - PolicyName: ContainerRoleAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
              - iam:PassRole
            Resource:
            - !GetAtt ProxyGeneratorRole.Arn
      - PolicyName: EC2InstanceDiscovery
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
            - ec2:Describe*
            Resource: "*"
      - PolicyName: BucketScanAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
            Resource:
              - arn:aws:s3:::*
              - arn:aws:s3:::*/*
      - PolicyName: DeployablesAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            Resource:
            - arn:aws:s3:::gnm-multimedia-rr-deployables
            - arn:aws:s3:::gnm-multimedia-rr-deployables/*

      - PolicyName: ElasticSearchAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: es:*
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${SearchDomain}
          - Effect: Deny
            Action: es:DeleteElasticSearchDomain
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${SearchDomain}

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref InstanceRole

  #Akka clustering - let all instances within `InstanceSecurityGroup` talk to each other
  InstanceSGIngressRemoting:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId
      FromPort: 2552
      ToPort: 2552
      IpProtocol: tcp
      GroupId: !GetAtt InstanceSecurityGroup.GroupId

  #Akka clustering - let all instances within `InstanceSecurityGroup` talk to each other
  InstanceSGIngressAkkaMgt:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId
      FromPort: 8558
      ToPort: 8558
      IpProtocol: tcp
      GroupId: !GetAtt InstanceSecurityGroup.GroupId

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance security group for archive hunter
      VpcId: !Ref VPCID
      SecurityGroupIngress:
      - SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId
        FromPort: 9000
        ToPort: 9000
        IpProtocol: tcp
      - SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId
        FromPort: 8558
        ToPort: 8558
        IpProtocol: tcp
      - CidrIp: !Ref OfficeIpRange
        FromPort: 22
        ToPort: 22
        IpProtocol: tcp

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      SecurityGroups:
      - !Ref InstanceSecurityGroup
      UserData: !Base64
        "Fn::Sub":
        - |
          #!/bin/bash -e

          mkdir -p /tmp/install
          aws s3 cp s3://gnm-multimedia-rr-deployables/${Stack}/${Stage}/archivehunter-webapp/archivehunter.deb /tmp/install

          dpkg --install /tmp/install/archivehunter.deb

          mkdir -p /usr/share/archivehunter/conf
          chown archivehunter /usr/share/archivehunter

          mkdir -p /var/log/archivehunter
          chown archivehunter /var/log/archivehunter

          declare -x HOSTNAME=`hostname`
          declare -x LOCAL_IP=`curl http://169.254.169.254/latest/meta-data/local-ipv4`

          echo "$LOCAL_IP  $HOSTNAME" >> /etc/hosts

          cat > /usr/share/archivehunter/conf/application.conf << EOF
          play.http.secret.key = "${AppSecretString}"
          play.filters {
            hosts {
              allowed = [".${AWS::Region}.elb.amazonaws.com","localhost:9000"]
            }

            # Disabled filters remove elements from the enabled list.
            disabled += play.filters.headers.SecurityHeadersFilter
            disabled += play.filters.hosts.AllowedHostsFilter
            disabled += play.filters.csrf.CSRFFilter
          }
          application.langs="en"

          externalData {
            awsRegion="${AWS::Region}"
            scanTargets="${ScanTargetsTable}"
            jobTable="${JobHistoryTable}"
            //ddbHost="localhost"
            ddbHost="dynamodb.${AWS::Region}.amazonaws.com"
            indexName = "archivehunter"
          }

          scanner {
            masterSchedule = 300 #in seconds
          }

          proxies {
            tableName = "${ProxyLocationTable}"
            ecsTaskDefinitionName = "${ProxyingTaskDefinition}"
            #this should match the container name in ProxyingTaskDefinition
            taskContainerName = "${Stack}-${App}Proxy-${Stage}"
            appServerUrl = "https://${LoadBalancer.DNSName}"

            completionNotification = "${TranscodeUpdateTopic}"
            errorNotification = "${TranscodeUpdateTopic}"
            warningNotification = "${TranscodeUpdateTopic}"

            transcodingRole = "${TranscodingRole.Arn}"

            notificationsQueue = "${TranscodeUpdateMsg}"
            videoPresetId = "${VideoTranscodingPresetId}"
            audioPresetId = "${AudioTranscodingPresetId}"
          }

          ecs {
            cluster = "${ProxyingCluster}"
            subnets = "${DeploySubnetsString}"
          }

          elasticsearch {
            hostname = "${SearchDomain.DomainEndpoint}"
            port = 443
            ssl = true
          }

          auth {
             panDomainBucket = "${PandaBucket}"
             deployedUrl = "https://${App}.${DeploymentDomain}"
             domain = "${DeploymentDomain}"
          }
          akka.actor {
            provider = "cluster"

            serializers {
              akka-cluster-client = "akka.cluster.client.protobuf.ClusterClientMessageSerializer"
              akka-singleton = "akka.cluster.singleton.protobuf.ClusterSingletonMessageSerializer"
            }
            serialization-bindings {
              "akka.cluster.client.ClusterClientMessage" = akka-cluster-client
              "akka.cluster.singleton.ClusterSingletonMessage" = akka-singleton
            }
              serialization-identifiers {
              "akka.cluster.client.protobuf.ClusterClientMessageSerializer" = 15
              "akka.cluster.singleton.protobuf.ClusterSingletonMessageSerializer" = 14
            }
          }

          akka.remote {
            log-remote-lifecycle-events = on
            netty.tcp {
              hostname = "${!LOCAL_IP}"
              port = 2552
            }
          }

          akka.management {
            http {
              hostname = "127.0.0.1"
              hostname = "${!LOCAL_IP}"
              bind-hostname = "0.0.0.0"
              port = 8558
              bind-port = 8558
            }

            cluster {
              auto-down-unreachable-after = 30s
              bootstrap {
                contact-point-discovery {
                  service-name = "${Stack}-${App}-${Stage}"
                  discovery-method = akka.discovery.aws-api-ec2-tag-based
                }
              }
            }
          }

          akka.discovery {
            # Set the following in your application.conf if you want to use this discovery mechanism:
            method = aws-api-ec2-tag-based
            aws-api-ec2-tag-based {
              class = akka.discovery.awsapi.ec2.Ec2TagBasedSimpleServiceDiscovery
              tag-key = "service"
            }
          }

          # Enable metrics extension in akka-cluster-metrics.
          akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]
          EOF

          cat > /etc/default/archivehunter << EOF
          #exiting on out of memory error should cause either systemd or autoscaling group to restart us
          JAVA_OPTS="-XX:+ExitOnOutOfMemoryError -Dconfig.file=/usr/share/archivehunter/conf/application.conf"
          EOF

          sudo mv /lib/systemd/system/archivehunter.service /tmp
          sudo bash -c "cat /tmp/archivehunter.service | sed s/LimitNOFILE=1024/LimitNOFILE=16384/ > /lib/systemd/system/archivehunter.service"
          sudo systemctl daemon-reload

          cat > /etc/security/limits.d/archivehunter.conf << EOF
          archivehunter hard  nofiles unlimited
          archivehunter soft  nofiles unlimited
          EOF

          systemctl restart archivehunter
          systemctl enable archivehunter
        - DeploySubnetsString: !Join [",",!Ref DeploySubnets]

#          cat > /etc/filebeat/filebeat.yml << EOF
#          filebeat.prospectors:
#          - type: log
#            enabled: true
#            paths:
#            - /var/log/mmplasmadash/*.log
#            fields:
#              App: ${App}
#              Stack: ${Stack}
#              Stage: ${Stage}
#
#            multiline:
#              pattern: '^\s+'
#              negate: false
#              match: after
#
#          output.logstash:
#            hosts: ["${LogstashEndpoint}"]
#          EOF

  AutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: "2"
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfig
      LoadBalancerNames:
      - !Ref LoadBalancer
      MaxSize: "8"
      MinSize: "2"
      Tags:
      - Key: App
        Value: !Sub ${App}-webapp
        PropagateAtLaunch: true
      - Key: Stack
        Value: !Ref Stack
        PropagateAtLaunch: true
      - Key: Stage
        Value: !Ref Stage
        PropagateAtLaunch: true
      - Key: service
        Value: !Sub ${Stack}-${App}-${Stage}
        PropagateAtLaunch: true
      VPCZoneIdentifier: !Ref DeploySubnets

  ProxyingCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${Stack}-${App}-${Stage}

  ProxyingTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 5

  ProxyingTaskDefinition:
    #this is used to register the image that runs proxying tasks.  Specific commands are run via overrides.
    # See ContainerTaskManager for details.
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt ProxyGeneratorRole.Arn
      ContainerDefinitions:
        - Image: !Ref ProxyingTaskImageRef #specified in "resources"
          MemoryReservation: 2048 #this is the limit of memory rather than the actual amount allocated
          Name: !Sub ${Stack}-${App}Proxy-${Stage}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ProxyingTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Cpu: 4096 #4 vCPU
      NetworkMode: awsvpc
      Memory: 8192  #minimum allowed with 4 vCPU
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt ProxyGeneratorRole.Arn

Outputs:
  ElasticSearchEndpoint:
    Description: ES endpoint for ArchiveHunter lambdas
    Value: !GetAtt SearchDomain.DomainEndpoint
    Export:
      Name: !Sub ${AWS::StackName}-ESEndpoint
  Loadbalancer:
    Description: Loadbalancer address to access service
    Value: !GetAtt LoadBalancer.DNSName
  AccessorSG:
    Description: Security group for accessing the index
    Value: !GetAtt AccessorSG.GroupId
    Export:
      Name: !Sub ${AWS::StackName}-AccessorSG